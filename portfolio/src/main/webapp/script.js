// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

const authCheckURL = '/auth/check';
const nickCheckURL = '/nickname/check';
const nickSetURL = '/nickname/set';
const nicknameURL = '/nickname.html';
const getCommentsURL = (limit) => `/comments?limit=${limit}`;
const deleteAllCommentsURL = '/delete-comments';

const STATUS_OK = 200;

/**
 * Initialise page with initial authentication and subsequent fetches and 
 * rendering of appropriate elements.
 */
function initPortfolio() {
  fetch(authCheckURL)
  .then(response => response.json())
  .then(info => {
    if (info.loggedIn) {
      generateComments();
      addLogoutLink(info.logoutURL);
    } else {
      hidePostBtn();
      showCommentLogin(info.loginURL);
    }
  });
}

/**
 * Generate logout link at bottom of page when user has logged in.
 * @param {String} logoutURL - path to logout page generated by backend.
 */
function addLogoutLink(logoutURL) {
  const container = document.getElementsByClassName('content')[0];

  const text = document.createElement('p');
  text.innerText = 'Signed in | ';
  text.style.textAlign = 'center';
  
  const setNicknameLink = document.createElement('a');
  setNicknameLink.href = nicknameURL;
  setNicknameLink.innerText = 'Set Nickname | ';

  const logoutLink = document.createElement('a');
  logoutLink.href = logoutURL;
  logoutLink.innerText = 'Log out';

  text.appendChild(setNicknameLink);
  text.appendChild(logoutLink);

  container.appendChild(text);
}

function hidePostBtn() {
  const postBtn = document.getElementById('postBtn');
  postBtn.style.display = 'none';
}

/**
 * Render the comments section with comments fetched from server.
 */
function generateComments() {
  const limit = getCommentLimit();

  fetch(getCommentsURL(limit))
  .then(response => response.json())
  .then(comments => {
    const section = document.getElementById('commentSection');

    // Clear old comments to insert new comments.
    section.innerHTML = '';
    
    comments.forEach(comment => {
      const container = document.createElement('div');
      container.className = 'comment-container';

      const post = document.createElement('p');
      post.innerText = comment.comment;

      const author = document.createElement('p');
      author.className = 'comment-info';
      author.innerText = '\u2014 Posted by ' + comment.name;

      container.appendChild(post);
      container.appendChild(author);

      section.appendChild(container);
    })
  });
}

/**
 * Helper function to fetch selector's value.
 */
function getCommentLimit() {
  const selector = document.getElementById('commentLimitSelect');
  return selector.options[selector.selectedIndex].value;
}

/**
 * Show message asking user to log in to post/view comments.
 * @param {String} loginURL - path to login page.
 */
function showCommentLogin(loginURL) {
  const section = document.getElementById('commentSection');

  section.innerHTML = '';

  const text = document.createElement('p');
  text.innerText = 'Please login to view and post comments.';
  text.style.textAlign = 'center';
  
  const loginText = document.createElement('a');
  loginText.innerText = 'Login here'
  loginText.href = loginURL;

  section.appendChild(text);
  section.appendChild(loginText);
}

/**
 * Fetches comments stored in backend servlet.
 */
function getComments() {
  fetch(authCheckURL)
  .then(response => response.json())
  .then(info => {
    if (info.loggedIn) {
      generateComments();
    } else {
      showCommentLogin(info.loginURL);
    }
  });
}

/**
 * Deletes all comments from backend and refreshes comments.
 */
function deleteAllComments() {
  const options = {
    method: 'POST'
  }

  fetch(deleteAllCommentsURL, options)
    .then(response => {
      if (response.status === STATUS_OK) {
        getComments();
      }
    });
}

/**
 * On-click function when post comment button is clicked.
 */
function openPostForm() {
  fetch(nickCheckURL)
  .then(response => response.json())
  .then(info => {
    if (info.hasNickname) {
      openModal('postCommentModal', 'postCommentModalClose');
    } else {
      window.location.href = nicknameURL;
    }
  })
}

/**
 * Opens a modal and configures close button.
 * @param {String} modalId - modal element's id.
 * @param {String} closeId - close element's id.
 */
function openModal(modalId, closeId) {
  const modal = document.getElementById(modalId);
  modal.style.display = 'block';

  const closeBtn = document.getElementById(closeId);
  closeBtn.onclick = function() {
    modal.style.display = 'none';
  };
}

/**
 * Function to open a modal with an image.
 * @param {String} modalId - modal element's id.
 * @param {String} modalImgId - image tag's id.
 * @param {String} closeId - close element's id.
 * @param {String} imgSrc - link to image source.
 */
function openSimpleImageModal(modalId, modalImgId, closeId, imgSrc) {
  openModal(modalId, closeId);

  const modalImg = document.getElementById(modalImgId);
  modalImg.src = imgSrc;
}

/**
 * Opens a modal with the given image and caption.
 * @param {String} modalId modal element's id.
 * @param {String} modalImgId image tag's id.
 * @param {String} captionId caption element's id
 * @param {String} closeId close element's id.
 * @param {String} imgSrc - link to image source.
 * @param {String} captionText - text to be displayed in caption.
 */
function openCaptionedImageModal(modalId, modalImgId, captionId, closeId, imgSrc, captionText) {  
  openSimpleImageModal(modalId, modalImgId, closeId, imgSrc);

  const caption = document.getElementById(captionId);
  caption.innerText = captionText;
}

/**
 * Create gallery elements and set images.
 */
function setGalleryImages() {
  const slideContainer = document.getElementsByClassName('slides-container')[0];
  const nextBtn = document.getElementsByClassName('next-slide')[0];
  
  // If we are on Home page gallery will not be defined.
  if (typeof slideContainer === 'undefined') {
    return;
  }

  for (const pic of picData) {
    const slidePic = document.createElement('div');
    slidePic.className = 'slide-pic';

    const counter = document.createElement('div');
    counter.className = 'slide-counter';

    const img = document.createElement('img');
    img.src = getSmallFilePath(pic.imgSrc);
    img.onclick = () => openSimpleImageModal(
        'galleryModal',
        'galleryModalImg',
        'galleryModalClose',
        pic.imgSrc
    );

    slidePic.appendChild(counter);
    slidePic.appendChild(img);

    slideContainer.insertBefore(slidePic, nextBtn);
  }
}

/**
 * Advance or Reverse the slide currently showing.
 * @param {Number} n - offset by which slides should be shifted.
 */
function advanceSlides(n) {
  currIndex += n;
  currIndex = showSlidePicture(currIndex);
  initMap();
};

/**
 * Show the image from the gallery at the given position.
 * @param {Number} n - index of image to be shown.
 */
function showSlidePicture(n) {
  const slides = document.getElementsByClassName('slide-pic');
  const caption = document.getElementById('slide-caption');

  // If not on pics.html document wil not contain any slide elements.
  if (slides.length === 0) {
    return n;
  }

  const newIndex = circularIndex(n, slides);
  
  for (const slide of slides) {
    slide.style.display = 'none';
  }

  slides[newIndex].style.display = 'block';
  
  caption.innerText = picData[newIndex].caption;
  slides[newIndex].getElementsByClassName('slide-counter')[0].innerText =
     (newIndex + 1).toString() + '/' + slides.length.toString();

  return newIndex;
};

/**
 * Function to manipulate image file path to compressed version.
 * @param {string} path - file path to original image file.
 */
function getSmallFilePath(path) {
  return path.replace('.jpeg', '_small.jpeg');
}

/**
 * Return correct index for a circular array.
 * @param {Number} n - input index for the array.
 * @param {Number} items - the given array.
 */
function circularIndex(n, items) {
  while (n < 0) {
    n += items.length;
  }

  return n % items.length;
}

/**
 * Initialise map for currently displayed image.
 */
function initMap() {
  const map = new google.maps.Map(
    document.getElementById('map'),
    {zoom: picData[currIndex].mapZoom, center: picData[currIndex].location}
  )

  const marker = new google.maps.Marker(
    {position: picData[currIndex].location, map: map}
  );
}

const picData = [
  {
    imgSrc: './images/gallery_1.jpeg',
    caption: 'This was taken outside King\'s College Chapel in Cambridge ' +
      'last summer. I decided to take a scenic route and accidentally timed ' +
      'this photo with a cyclist going past.',
    location: {lat: 52.204, lng: 0.117},
    mapZoom: 15
  },
  {
    imgSrc: './images/gallery_2.jpeg',
    caption: 'IC A vs Birmingham B in the NHSF National Kabaddi Tournament ' +
      'earlier this year. I joined Kabaddi at Imperial this year and I am ' +
      'loving it!',
    location: {lat: 52.546, lng: -2.052},
    mapZoom: 12
  },
  {
    imgSrc: './images/gallery_3.jpeg',
    caption: 'A photo of the Marina Bay Sands Hotel in Singapore during one ' +
      'of its light shows, taken from across the bay.',
    location: {lat: 1.285, lng: 103.854},
    mapZoom: 15
  },
  {
    imgSrc: './images/gallery_4.jpeg',
    caption: 'A firebreather in the desert. Taken during a desert safari ' +
      'and dinner excursion when visiting Dubai.',
    location: {lat: 25.179, lng: 55.299},
    mapZoom: 12
  },
  {
    imgSrc: './images/gallery_5.jpeg',
    caption: 'A close-up of a flower in the Flower Dome of the Gardens By ' +
      'the Bay in Singapore.',
    location: {lat: 1.284, lng: 103.865},
    mapZoom: 15
  }
];

setGalleryImages();
let currIndex = showSlidePicture(0);